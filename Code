#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

const char* ssid = "";       // your network SSID (name)
const char* password = ""; // your network password

String URL = "http://api.openweathermap.org/data/2.5/weather?";
String ApiKey = "Your_api_key";//replace with your actual api key 
String lat = "19.1232";
String lon = "72.8361";

ESP8266WebServer server(80);

float temperature = 0;
float humidity = 0;

void handleRoot() {
  String html = "<!DOCTYPE html><html><head><meta charset='utf-8'><title>Andheri Weather Data</title>";
  html += "<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css'>";
  html += "<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css'>";
  html += "<link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' />";
  html += "<style>";
  html += "body { font-family: Arial, sans-serif; background: linear-gradient(to right, #83a4d4, #b6fbff); color: #333; text-align: center; padding: 20px; }";
  html += "h1 { color: #fff; font-size: 2.5em; margin-bottom: 20px; }";
  html += ".chart-container { position: relative; width: 80%; max-width: 800px; margin: auto; }";
  html += "#weatherChart { background: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); padding: 20px; margin-top: 20px; }";
  html += "#map { height: 400px; margin-top: 20px; border-radius: 8px; }";
  html += ".spinner-border { margin-top: 20px; }";
  html += "</style>";
  html += "<script src='https://cdn.jsdelivr.net/npm/chart.js'></script>";
  html += "<script src='https://unpkg.com/leaflet/dist/leaflet.js'></script></head><body>";
  html += "<h1>Kalwa Weather Data <i class='fas fa-cloud-sun'></i></h1>";
  html += "<div class='chart-container'><canvas id='weatherChart'></canvas></div>";
  html += "<div id='spinner' class='spinner-border' role='status'><span class='sr-only'>Loading...</span></div>";
  html += "<div id='map'></div>";
  html += "<script>";
  html += "let temperatureData = [];";
  html += "let humidityData = [];";
  html += "const labels = [];";
  html += "const ctx = document.getElementById('weatherChart').getContext('2d');";
  html += "const weatherChart = new Chart(ctx, {type: 'bar', data: {labels: labels, datasets: [{label: 'Temperature (°C)', data: temperatureData, backgroundColor: 'rgba(255, 99, 132, 0.2)', borderColor: 'rgba(255, 99, 132, 1)', borderWidth: 1}, {label: 'Humidity (%)', data: humidityData, backgroundColor: 'rgba(54, 162, 235, 0.2)', borderColor: 'rgba(54, 162, 235, 1)', borderWidth: 1}]}, options: {scales: {y: {beginAtZero: true}}, plugins: {legend: {display: true, labels: {color: '#444'}}}}});";
  html += "function fetchData() { document.getElementById('spinner').style.display = 'block'; fetch('/data').then(response => response.json()).then(data => {";
  html += "temperatureData.push(data.temperature);";
  html += "humidityData.push(data.humidity);";
  html += "labels.push(new Date().toLocaleTimeString());";
  html += "if (temperatureData.length > 10) { temperatureData.shift(); humidityData.shift(); labels.shift(); }";
  html += "weatherChart.update();";
  html += "document.getElementById('spinner').style.display = 'none';";
  html += "}); }";
  html += "setInterval(fetchData, 30000);"; // Fetch data every 30 seconds
  html += "fetchData();"; // Fetch initial data
  html += "const map = L.map('map').setView([" + lat + ", " + lon + "], 13);";
  html += "L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { attribution: '© OpenStreetMap contributors' }).addTo(map);";
  html += "L.marker([" + lat + ", " + lon + "]).addTo(map).bindPopup('Kalwa Weather Station').openPopup();";
  html += "</script></body></html>";
  server.send(200, "text/html", html);
}

void handleData() {
  String json = "{\"temperature\": " + String(temperature) + ", \"humidity\": " + String(humidity) + "}";
  server.send(200, "application/json", json);
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.begin();
  Serial.println("HTTP server started");

  getData();
}

void loop() {
  server.handleClient();
  delay(30000);
  getData();
}

void getData() {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    WiFiClient client;
    String fullURL = URL + "lat=" + lat + "&lon=" + lon + "&appid=" + ApiKey;
    http.begin(client, fullURL);
    int httpCode = http.GET();

    if (httpCode > 0) {
      String JSON_Data = http.getString();
      Serial.println(JSON_Data);

      DynamicJsonDocument doc(2048);
      deserializeJson(doc, JSON_Data);
      JsonObject obj = doc.as<JsonObject>();

      // Explicitly cast the JSON values to float
      temperature = obj["main"]["temp"].as<float>() - 273.15; // Convert from Kelvin to Celsius
      humidity = obj["main"]["humidity"].as<float>();

      Serial.print("Temperature: ");
      Serial.println(temperature);
      Serial.print("Humidity: ");
      Serial.println(humidity);
    } else {
      Serial.println("Error in HTTP request");
    }
    http.end();
  }
}
